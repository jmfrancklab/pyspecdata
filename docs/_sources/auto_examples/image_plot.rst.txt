.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_plot.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_image_plot.py:

Plotting Routines
=================

A simple demonstration of a multi-line *vs.*
image plot with
`<https://en.wikipedia.org/wiki/Domain_coloring> domain coloring`_, nested
inside a figure list.

We specifically test a safety feature that doesn't allow image plots
to have unevenly spaced axes,
and show how to deal with this.



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_image_plot_001.png
          :alt: 1D data
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_image_plot_002.png
          :alt: image plot
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_image_plot_003.png
          :alt: image plot -- good axis
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)
    C:\ProgramData\Anaconda3\lib\site-packages\numpy\core\_asarray.py:85: ComplexWarning: Casting complex values to real discards the imaginary part
      return array(a, dtype, copy=False, order=order)






|


.. code-block:: default

    from pyspecdata import *
    from numpy import *
    # let's make some fake inversion recovery data
    vd = nddata(r_[0,0.05,0.1,0.15,0.2,0.3,0.4,0.6,0.8,1.0,2.0,3.0,5.0],'vd')
    signal_amp = 1-2*exp(-vd/1.0)
    t2 = nddata(r_[0:2:256j],'t2')
    signal_amp *= exp(-t2/0.1)
    signal_amp.add_noise(0.1)
    signal_amp.set_units('s')
    signal_amp.ft('t2', shift=True)
    with figlist_var() as fl:
        fl.next('1D data')
        fl.plot(signal_amp)
        generated_error = False
        # If I were to just run the following command (not nested in try/except)
        fl.next('this figure intentionally blank!')
        try:
            fl.image(signal_amp)
        except:
            generated_error = True
        # (try it).
        # I would get an error that tells me to do this
        fl.next('image plot -- good axis')
        fl.image(signal_amp.C.setaxis('vd','#').set_units('vd','scan #'))
        assert generated_error


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.499 seconds)


.. _sphx_glr_download_auto_examples_image_plot.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: image_plot.py <image_plot.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: image_plot.ipynb <image_plot.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
