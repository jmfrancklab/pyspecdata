.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_fit_fake_data.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_fit_fake_data.py:

Fitting Data
==============

This example creates fake data with noise
then fits the exponential with the fitdata
function.



.. image:: /auto_examples/images/sphx_glr_fit_fake_data_001.png
    :alt: fit with guess
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Getting symbolic function
    Getting symbolic function
    {R_1, M_0, M_inf}
    {\bf Warning:} You have no error associated with your plot, and I want to flag this for now


    c:\users\johnf\notebook\pyspecdata\pyspecdata\core.py:7535: Warning: You have no error associated with your plot, and I want to flag this for now
      warnings.warn('You have no error associated with your plot, and I want to flag this for now',Warning)
    output: {'M_0': -102.42378444846382, 'M_inf': 102.1750905774885, 'R_1': 5.9911568873602645}
    latex: $f(\tau)=102.18 + \left(-1.02\times 10^{2} - 102.18\right) e^{- 5.99 \tau}$






|


.. code-block:: default

    from pyspecdata import *
    from sympy import symbols, latex, Symbol
    from sympy import exp as s_exp
    # {{{ this is the contents of pylab.py -- works
    # need to go through and figure out which lines
    # are actually needed and which are not
    # -- I have already stripped out some
    from matplotlib.pyplot import figure, subplot, show, xlim, ylim, plot, gca
    from numpy import * # I think it wasn't importing from numpy b/c it seems we're inside sphinx
    # }}}
    #{{{creating a fake data recovery curve
    tau = nddata(r_[0:2:100j], 'tau')
    fake_data = 102*(1-2*exp(-tau*6.0))
    fake_data.add_noise(5.0)
    #}}}
    #{{{ fitting data
    f = fitdata(fake_data)
    M0,Mi,R1,vd = symbols("M_0 M_inf R_1 tau",real=True)
    f.functional_form = Mi + (M0-Mi)*s_exp(-vd*R1)
    logger.info(strm("Functional Form", f.functional_form))
    logger.info(strm("Functional Form", f.functional_form))
    f.set_guess({M0:-500, Mi:500, R1:2})
    f.settoguess()
    guess = f.eval(100)
    f.fit()
    print("output:",f.output())
    print("latex:",f.latex())
    #}}}
    # {{{ this is just to show all the parameters
    list_symbs = []
    for j,k in f.output().items():
        s_repr = latex(Symbol(j))
        list_symbs.append(f'${s_repr} = {k:0.5g}$')
    list_symbs = '\n'.join(list_symbs)
    # }}}
    T1 = 1./f.output('R_1')
    # }}}
    with figlist_var() as fl: 
        fl.next('fit with guess')
        fl.plot(guess,label='guess')
        fl.plot(fake_data,'o',label='fake data')
        thisline = fl.plot(f.eval(100),label='fit')
        # {{{ just put the text
        ax = gca()
        text(0.5,0.5,f.latex(),
                ha='center',va='center',
                color=thisline[0].get_color(),
                transform = ax.transAxes)
        text(0.5,0.5,(3*'\n')+list_symbs,
                ha='center',va='top',
                size=10,
                color=thisline[0].get_color(),
                transform = ax.transAxes)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.602 seconds)


.. _sphx_glr_download_auto_examples_fit_fake_data.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: fit_fake_data.py <fit_fake_data.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: fit_fake_data.ipynb <fit_fake_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
