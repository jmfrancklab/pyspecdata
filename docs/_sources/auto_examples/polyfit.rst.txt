.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_polyfit.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_polyfit.py:


Polynomial Fitting
==================

A quick demonstration of polynomial fitting.



.. image:: /auto_examples/images/sphx_glr_polyfit_001.png
    :alt: polyfit
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    I found the minimum here at 1.9851141610040257






|


.. code-block:: default

    from pylab import *
    from pyspecdata import *
    # {{{ generate fake data
    x = nddata(r_[0:10:7j], 'x')
    y = (x-2.0)**2
    y.add_noise(2)
    # }}}
    plot(y,'o')
    c = y.polyfit('x', order=2)
    assert len(c)==3
    # math for min:
    # a(x-b)²= ax² - 2abx + ab²
    # c₂ = a
    # c₁ = -2ab
    # c₀ = ab²
    # b = -c₁/(c₂2)
    print("I found the minimum here at",-c[1]/c[2]/2)
    # generate a polynomial that's more finely spaced
    x = nddata(r_[0:10:100j], 'x')
    plot(x.eval_poly(c,'x'))
    # {{{ not a good idea, but force the y intercept to 0
    #     to show the code works
    c = y.polyfit('x', order=3, force_y_intercept=0)
    x = nddata(r_[0:10:100j], 'x')
    plot(x.eval_poly(c,'x'))
    # }}}
    show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.122 seconds)


.. _sphx_glr_download_auto_examples_polyfit.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: polyfit.py <polyfit.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: polyfit.ipynb <polyfit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
